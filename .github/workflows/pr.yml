name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Fast validation for PRs
  validate:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check code formatting
        run: |
          if command -v prettier &> /dev/null; then
            npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
          else
            echo "Prettier not found, skipping format check"
          fi
        continue-on-error: true
        
      - name: Lint code
        run: npm run lint
        
      - name: Type check
        run: npm run type-check
        
      - name: Build check
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://lvdediwxnapnsyjsbpgu.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx2ZGVkaXd4bmFwbnN5anNicGd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1MTA3NzksImV4cCI6MjA2OTA4Njc3OX0.fqofg44Au6Va25UQeZ3OY3m5yb18wFgrwc6q-Pwtfz4
          
      - name: Run tests
        run: npm run test
        env:
          CI: true
          
      - name: Comment PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            const success = '${{ job.status }}' === 'success';
            const body = `## PR Validation Results ${success ? '‚úÖ' : '‚ùå'}
            
            **Build Status:** ${success ? 'Passed' : 'Failed'}
            **Type Check:** ${success ? 'Passed' : 'Failed'}  
            **Linting:** ${success ? 'Passed' : 'Failed'}
            **Tests:** ${success ? 'Passed' : 'Failed'}
            
            ${success ? 
              'üéâ All checks passed! This PR is ready for review.' : 
              '‚ùå Some checks failed. Please fix the issues before merging.'
            }
            
            _Updated: ${new Date().toISOString()}_`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Security check for PRs
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Security audit
        run: |
          npm audit --audit-level=moderate
          echo "Security audit completed"
        continue-on-error: true